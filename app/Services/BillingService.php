<?php

namespace App\Services;

use App\Models\Client;
use App\Models\GeneratedBill;
use App\Models\Payment;
use Carbon\Carbon;
use Illuminate\Container\Attributes\Auth;
use Illuminate\Support\Facades\DB;

class BillingService
{

    public function generateMonthlyBills()
    {
        if (!Carbon::now()->isFirstOfMonth()) {
            return;
        }

        $clients = Client::where('disabled', false)->get();

        foreach ($clients as $client) {
            DB::transaction(function () use ($client) {
                $existingBill = GeneratedBill::where('client_id', $client->id)
                    ->where('bill_type', 'monthly')
                    ->whereMonth('generated_date', Carbon::now()->month)
                    ->whereYear('generated_date', Carbon::now()->year)
                    ->first();

                if ($existingBill) {
                    return;
                }

                $bill = GeneratedBill::create([
                    'client_id' => $client->id,
                    'amount' => $client->bill_amount,
                    'bill_type' => 'monthly',
                    'generated_date' => Carbon::now()->startOfMonth(),
                    'month' => Carbon::now()->format('F'),
                    'remarks' => "Monthly bill for " . Carbon::now()->format('F') . " Generated by system",
                    'created_by' =>  Auth::id() ?? env('SYSTEM_USER_ID'),
                ]);

                $client->due += $client->bill_amount;
                $client->status = 'due';

                if ($client->current_balance >= $client->due) {
                    $this->processAutoPayment($client, $client->due);
                }

                $client->save();
            });
        }
    }

    private function processAutoPayment(Client $client, float $amount)
    {
        Payment::create([
            'client_id' => $client->id,
            'amount' => $amount,
            'discount' => 0,
            'payment_date' => Carbon::now(),
            'payment_type' => 'monthly',
            'month' => Carbon::now()->format('F'),
            'remarks' => 'Auto payment applied',
            'collected_by' => Auth::id() ?? env('SYSTEM_USER_ID'),
            'created_by' => Auth::id() ?? env('SYSTEM_USER_ID'),
        ]);

        $client->current_balance -= $amount;
        $client->due = 0;
        $client->status = 'paid';
    }

    public function processManualPayment(
        Client $client,
        $collected_by_id,
        float $paymentAmount,
        float $discount = 0,
        ?string $remarks = null,
        string $paymentType = 'monthly',
        ?string $month = null
    ) {
        DB::transaction(function () use ($client, $collected_by_id, $paymentAmount, $discount, $remarks, $paymentType, $month) {
            $totalPayment = $paymentAmount + $discount;

            Payment::create([
                'client_id' => $client->id,
                'amount' => $paymentAmount,
                'discount' => $discount,
                'payment_date' => Carbon::now(),
                'payment_type' => $paymentType,
                'month' => $month ?? Carbon::now()->format('F'),
                'remarks' => $remarks,
                'collected_by' => $collected_by_id,
                'created_by' =>  Auth::id() ?? env('SYSTEM_USER_ID'),
            ]);

            $client->due -= $totalPayment;
            if ($client->due < 0) {
                $extraPayment = abs($client->due);
                $client->current_balance += $extraPayment;
                $client->due = 0;
                $client->status = 'paid';
            } elseif ($client->due === 0) {
                $client->status = 'paid';
            }

            $client->save();
        });
    }


    public function generateBillsForEnabledClients()
    {
        $clients = Client::where('disabled', false)->get();
        foreach ($clients as $client) {
            $this->generateBillForClient($client);
        }
    }

    private function generateBillForClient(Client $client)
    {
        if (!$client->disabled) {
            $this->generateMonthlyBills();
        }
    }
}
